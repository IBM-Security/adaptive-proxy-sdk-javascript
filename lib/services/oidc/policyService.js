/**
 * MIT License
 * Copyright 2020 - IBM Corp.
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions: The above copyright
 * notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

const Service = require('../service');


/**
 * A class for making policy related requests to OIDC. These include the initial
 * grant request, as well as validating received JWT assertions.
 * @extends Service
 * @author Adam Dorogi-Kaposi <adam.dorogi-kaposi@ibm.com>
 */
class PolicyService extends Service {
  /**
   * Create a new {@link PolicyService} object.
   * @param {Object} auth The credentials to authenticate to OIDC.
   * @param {string} baseURL The base URL for the OIDC API.
   * @param {Object} context The context to send for assessment.
   * @param {string} context.sessionId The session ID generated by the
   * user-agent, using an Adaptive client SDK.
   * @param {string} context.userAgent The user-agent, typically obtained form
   * the User-Agent HTTP header.
   * @param {string} context.ipAddress The IP address of the user-agent.
   */
  constructor(auth, baseURL, context) {
    super(auth, baseURL, context, 'x-www-form-urlencoded');
  }

  /**
   * Evaluate the policy attached to the client application.
   *
   * Request an access token from OIDC with the <code>policyauth</code>
   * grant-type. OIDC will in turn evaluate the policy attached to the client
   * application, and will respond depending on the outocme of the evaluation.
   * The response from OIDC will be one of two statuses: <code>deny</code>, or
   * <code>requires</code>. A deny response is indicated by a 401 status code.
   * A 200 HTTP status code indicates a <code>requires</code> response.
   * @return {Promise<Object>} The HTTP response body for a
   * <code>requires</code> response from OIDC.
   * @throws {Error} A <code>deny</code> response is received.
   */
  async assess() {
    const response = await this.post('/v1.0/endpoint/default/token',
        {grant_type: 'policyauth', scope: 'openid',
          context: this._context});
    return response.data;
  }

  /**
   * Validate a JWT assertion received from a first- or second-factor
   * verification on OIDC.
   *
   * The response from OIDC will be one of three statuses: <code>allow</code>,
   * <code>deny</code>, or <code>requires</code>. A deny response is indicated
   * by a 401 status code. A 200 HTTP status code indicates an
   * <code>allow</code> or <code>requires</code> response.
   * @param {string} jwt The JWT assertion to validate.
   * @return {Promise<Object>} The HTTP response body for an <code>allow</code>
   * or <code>requires</code> response from OIDC.
   * @throws {Error} A <code>deny</code> response is received.
   */
  async validate(jwt) {
    const response = await this.post('/v1.0/endpoint/default/token',
        {grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
          scope: 'openid',
          context: this._context,
          assertion: jwt});
    return response.data;
  }
}

module.exports = PolicyService;
